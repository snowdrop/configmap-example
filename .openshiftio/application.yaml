apiVersion: v1
kind: Template
metadata:
  name: configmap
  labels:
    app.kubernetes.io/part-of: configmap-example
    app.kubernetes.io/name: configmap-service
    app.kubernetes.io/component: frontend
    app.openshift.io/runtime: rh-spring-boot
    app.openshift.io/runtime-version: "2.4.9"
  annotations:
    iconClass: icon-spring
    tags: spring-boot, configmap, java, microservice
    openshift.io/display-name: Spring Boot - Properties externalized using Config Map
    openshift.io/provider-display-name: "Red Hat, Inc."
    openshift.io/documentation-url: "https://appdev.prod-preview.openshift.io/docs/spring-boot-runtime.html#mission-configmap-spring-boot-tomcat"
    app.kubernetes.io/vcs-uri: git@github.com:snowdrop/configmap-example.git
    description: >-
      The Externalized Configuration Mission provides a basic example of using a ConfigMap to externalize configuration.
      ConfigMap is an object used by OpenShift to inject configuration data as simple key and value pairs into one or more Linux containers while keeping the containers independent of OpenShift.
parameters:
- name: RUNTIME_VERSION
  displayName: OpenJDK 8 image version to use
  description: Specifies which version of the OpenShift OpenJDK 8 image to use
  value: "1.3"
  required: true
- name: SOURCE_REPOSITORY_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
- name: SOURCE_REPOSITORY_REF
  description: The branch name for the application
  displayName: Source Branch
  value: master
  required: true
- name: SOURCE_REPOSITORY_DIR
  description: The location within the source repo of the application
  displayName: Source Directory
  value: .
  required: true
- name: ARTIFACT_COPY_ARGS
  description: Syntax to be used to copy uberjar files to the target directory
  displayName: Copy Args
  value: '*.jar'
  required: true
- name: GITHUB_WEBHOOK_SECRET
  description: A secret string used to configure the GitHub webhook.
  displayName: GitHub Webhook Secret
  required: true
  from: '[a-zA-Z0-9]{40}'
  generate: expression
- name: MAVEN_MIRROR_URL
  description: Maven Nexus Repository to be used during build phase
  displayName:
  required: false
- name: SERVICE_ACCOUNT
  description: Service account to be mounted with the created pod
  displayName: jenkins
  required: false
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: configmap
  spec: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: runtime
    labels:
      app.kubernetes.io/part-of: configmap-example
      app.kubernetes.io/name: configmap-service
      app.kubernetes.io/component: frontend
      app.openshift.io/runtime: rh-spring-boot
      app.openshift.io/runtime-version: "2.4.9"
    annotations:
      app.kubernetes.io/vcs-uri: git@github.com:snowdrop/configmap-example.git
  spec:
    tags:
    - name: "${RUNTIME_VERSION}"
      from:
        kind: DockerImage
        name: registry.access.redhat.com/ubi8/openjdk-8:${RUNTIME_VERSION}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: configmap
    labels:
      app.kubernetes.io/part-of: configmap-example
      app.kubernetes.io/name: configmap-service
      app.kubernetes.io/component: frontend
      app.openshift.io/runtime: rh-spring-boot
      app.openshift.io/runtime-version: "2.4.9"
    annotations:
      app.kubernetes.io/vcs-uri: git@github.com:snowdrop/configmap-example.git
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: configmap:2.4.9-7
    postCommit: {}
    resources: {}
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: runtime:${RUNTIME_VERSION}
        incremental: true
        env:
        - name: MAVEN_ARGS_APPEND
          value: "-pl ${SOURCE_REPOSITORY_DIR}"
        - name: ARTIFACT_DIR
          value: "${SOURCE_REPOSITORY_DIR}/target"
        - name: MAVEN_MIRROR_URL
          value: "${MAVEN_MIRROR_URL}"
        - name: ARTIFACT_COPY_ARGS
          value: "${ARTIFACT_COPY_ARGS}"
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: configmap
      provider: snowdrop
      version: "2.4.9-7"
      group: dev.snowdrop.example
      app.kubernetes.io/part-of: configmap-example
      app.kubernetes.io/name: configmap-service
      app.kubernetes.io/component: frontend
      app.openshift.io/runtime: rh-spring-boot
      app.openshift.io/runtime-version: "2.4.9"
    annotations:
      app.kubernetes.io/vcs-uri: git@github.com:snowdrop/configmap-example.git
    name: configmap
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: configmap
      provider: snowdrop
      group: dev.snowdrop.example
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: configmap
      provider: snowdrop
      version: "2.4.9-7"
      group: dev.snowdrop.example
      app.kubernetes.io/part-of: configmap-example
      app.kubernetes.io/name: configmap-service
      app.kubernetes.io/component: frontend
      app.openshift.io/runtime: rh-spring-boot
      app.openshift.io/runtime-version: "2.4.9"
    annotations:
      app.kubernetes.io/vcs-uri: git@github.com:snowdrop/configmap-example.git
    name: configmap
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: configmap
      provider: snowdrop
      group: dev.snowdrop.example
    strategy:
      rollingParams:
        timeoutSeconds: 3600
      type: Rolling
    template:
      metadata:
        labels:
          app: configmap
          provider: snowdrop
          version: "2.4.9-7"
          group: dev.snowdrop.example
          app.kubernetes.io/part-of: configmap-example
          app.kubernetes.io/name: configmap-service
          app.kubernetes.io/component: frontend
          app.openshift.io/runtime: rh-spring-boot
          app.openshift.io/runtime-version: "2.4.9"
        annotations:
          app.kubernetes.io/vcs-uri: git@github.com:snowdrop/configmap-example.git
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: configmap:2.4.9-7
          imagePullPolicy: IfNotPresent
          name: spring-boot
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          securityContext:
            privileged: false
          serviceAccountName: ${SERVICE_ACCOUNT}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - spring-boot
        from:
          kind: ImageStreamTag
          name: configmap:2.4.9-7
      type: ImageChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: configmap
      provider: snowdrop
      version: "2.4.9-7"
      group: dev.snowdrop.example
      app.kubernetes.io/part-of: configmap-example
      app.kubernetes.io/name: configmap-service
      app.kubernetes.io/component: frontend
      app.openshift.io/runtime: rh-spring-boot
      app.openshift.io/runtime-version: "2.4.9"
    annotations:
      app.kubernetes.io/vcs-uri: git@github.com:snowdrop/configmap-example.git
    name: configmap
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: configmap
